{"ast":null,"code":"var _jsxFileName = \"/Users/felixtoft/Git Repos/liveCoach/Frontend-App/src/LiveCoachView/LiveCoachMap.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './CoachLive.css';\nimport { Stage, Layer, Rect, Text, Circle, Line, Image, Group, Arrow } from 'react-konva';\nimport Konva from 'konva';\nimport NoteView from './MapHelperFunctions/NoteView.js';\nimport MapSideBar from './MapHelperFunctions/MapSideBar.js';\nimport Distance from './MapHelperFunctions/Distance.js';\nimport IsOnLine from './MapHelperFunctions/IsOnLine.js';\nimport MapImg from './MapHelperFunctions/MapImg.js';\nimport RenderArrows from './MapHelperFunctions/RenderArrows.js';\nimport RenderCircles from './MapHelperFunctions/RenderCircles.js';\nexport default function LiveCoachMap() {\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    id: \"mapContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NoteView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    id: \"mapRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Map, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  })));\n}\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lines: [],\n      circlePoints: [],\n      arrowPoints: [],\n      currentTool: 'brush',\n      eraser: false,\n      brush: true,\n      circle: false,\n      arrow: false\n    };\n\n    this.makeElement = elementArray => {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const tempArray = elementArray;\n      tempArray[tempArray.length - 1][1] = [point.x, point.y];\n      this.setState({\n        elementArray: tempArray\n      });\n    };\n\n    this.handleMouseDown = () => {\n      this._drawing = true;\n\n      if (this.state.brush === true) {\n        this.setState({\n          lines: [...this.state.lines, []]\n        });\n      } else if (this.state.eraser === true) {\n        //get mouse pointer position\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        console.log('ERASING pointX: ' + point.x + ' point y ' + point.y); //Check to see if an arrow will be erased instead\n\n        const tempArrows = this.state.arrowPoints; //loop through each arrow in tempArrows\n\n        for (let i = 0; i < tempArrows.length; i++) {\n          const currentArrow = tempArrows[i];\n          const startpoint = currentArrow[0];\n          const endpoint = currentArrow[1];\n          const slope = (endpoint[1] - startpoint[1]) / (endpoint[0] - startpoint[0]); //function of line in between each point.\n\n          if (IsOnLine(startpoint, endpoint, [point.x, point.y], slope)) {\n            tempArrows.splice(i, 1);\n            this.setState({\n              arrowPoints: tempArrows\n            });\n            return;\n          }\n        } //Check to see if circle will be erased\n\n\n        const tempCircles = this.state.circlePoints;\n\n        for (let i = 0; i < tempCircles.length; i++) {\n          console.log('Here');\n          const currentCircle = tempCircles[i];\n          const midpoint = currentCircle[0];\n          const radius = Distance(currentCircle[0], currentCircle[1]);\n          const radiusRange = [radius + 10, radius - 10];\n          const pointDistance = Distance([point.x, point.y], midpoint);\n\n          if (pointDistance < radiusRange[1] && pointDistance > radiusRange[0]) {\n            tempCircles.splice(i, 1);\n            this.setState({\n              circlePoints: tempCircles\n            });\n            return;\n          }\n        } //Set up ranges for eraser so that user only has to click close to line.\n\n\n        const xRange = [point.x - 15, point.x + 15];\n        const yRange = [point.y - 15, point.y + 15];\n        const tempLines = this.state.lines; //loop through each line in templines\n\n        for (let i = 0; i < tempLines.length; i++) {\n          const currentLine = tempLines[i]; //loop through each value, the value z will be the index for the x-value of the point, making z + 1 the y value of that point\n\n          for (let z = 0; z < currentLine.length - 1; z = z + 2) {\n            //Check to see if x value of point lies within the range\n            if (currentLine[z] > xRange[0] && currentLine[z] < xRange[1]) {\n              //Check to see if y value of point lies within the range\n              if (currentLine[z + 1] > yRange[0] && currentLine[z + 1] < yRange[1]) {\n                //deletes a line\n                tempLines.splice(i, 1);\n                this.setState({\n                  lines: tempLines\n                });\n                return;\n              }\n            }\n          }\n        } //End of Eraser\n\n      } else if (this.state.circle === true) {\n        //create new entry in circlePoints\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        this.setState({\n          circlePoints: [...this.state.circlePoints, [[point.x, point.y], [point.x, point.y]]]\n        });\n      } else if (this.state.arrow === true) {\n        //create new entry in arrowPoints\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        this.setState({\n          arrowPoints: [...this.state.arrowPoints, [[point.x, point.y], [point.x, point.y]]]\n        });\n      }\n    };\n\n    this.handleMouseMove = e => {\n      if (!this._drawing) {\n        return;\n      }\n\n      if (this.state.brush === true) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        const {\n          lines\n        } = this.state;\n        let lastLine = lines[lines.length - 1]; // add point\n\n        lastLine = lastLine.concat([point.x, point.y]); // replace last\n\n        lines.splice(lines.length - 1, 1, lastLine);\n        this.setState({\n          lines: lines.concat()\n        });\n      } else if (this.state.circle === true) {\n        this.makeElement(this.state.circlePoints);\n      } else if (this.state.arrow === true) {\n        this.makeElement(this.state.arrowPoints);\n      }\n    };\n\n    this.handleMouseUp = () => {\n      this._drawing = false;\n    };\n\n    this.eraserClick = evt => {\n      this.setState({\n        eraser: true,\n        currentTool: 'eraser',\n        brush: false,\n        circle: false,\n        arrow: false\n      });\n    };\n\n    this.brushClick = evt => {\n      this.setState({\n        eraser: false,\n        currentTool: 'brush',\n        brush: true,\n        circle: false,\n        arrow: false\n      });\n    };\n\n    this.clearClick = evt => {\n      this.setState({\n        lines: [],\n        circlePoints: [],\n        arrowPoints: []\n      });\n    };\n\n    this.circleClick = evt => {\n      this.setState({\n        eraser: false,\n        currentTool: 'circle',\n        brush: false,\n        circle: true,\n        arrow: false\n      });\n    };\n\n    this.arrowClick = evt => {\n      this.setState({\n        eraser: false,\n        currentTool: 'arrow',\n        brush: false,\n        circle: false,\n        arrow: true\n      });\n    };\n  }\n\n  render() {\n    const stageWidth = window.innerWidth / 2.4;\n    const stageHeight = window.innerWidth / 2.4;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"MapDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MapSideBar, {\n      brushClick: this.brushClick,\n      arrowClick: this.arrowClick,\n      circleClick: this.circleClick,\n      clearClick: this.clearClick,\n      eraserClick: this.eraserClick,\n      currentTool: this.state.currentTool,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Stage, {\n      container: '#mapRow',\n      width: stageWidth,\n      height: stageHeight,\n      onContentMousedown: this.handleMouseDown,\n      onContentMousemove: this.handleMouseMove,\n      onContentMouseup: this.handleMouseUp,\n      ref: node => {\n        this.stageRef = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(MapImg, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }\n    }, RenderCircles(this.state.circlePoints)), /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }\n    }, RenderArrows(this.state.arrowPoints)), /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }\n    }, this.state.lines.map((line, i) => /*#__PURE__*/React.createElement(Line, {\n      key: i,\n      points: line,\n      stroke: \"red\",\n      fill: 'red',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 50\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/felixtoft/Git Repos/liveCoach/Frontend-App/src/LiveCoachView/LiveCoachMap.js"],"names":["React","Component","Container","Row","Col","Stage","Layer","Rect","Text","Circle","Line","Image","Group","Arrow","Konva","NoteView","MapSideBar","Distance","IsOnLine","MapImg","RenderArrows","RenderCircles","LiveCoachMap","Map","state","lines","circlePoints","arrowPoints","currentTool","eraser","brush","circle","arrow","makeElement","elementArray","stage","stageRef","getStage","point","getPointerPosition","tempArray","length","x","y","setState","handleMouseDown","_drawing","console","log","tempArrows","i","currentArrow","startpoint","endpoint","slope","splice","tempCircles","currentCircle","midpoint","radius","radiusRange","pointDistance","xRange","yRange","tempLines","currentLine","z","handleMouseMove","e","lastLine","concat","handleMouseUp","eraserClick","evt","brushClick","clearClick","circleClick","arrowClick","render","stageWidth","window","innerWidth","stageHeight","node","map","line"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './CoachLive.css';\n\n\nimport { Stage, Layer, Rect, Text, Circle, Line, Image, Group, Arrow } from 'react-konva';\nimport Konva from 'konva';\n\nimport NoteView from './MapHelperFunctions/NoteView.js'\nimport MapSideBar from './MapHelperFunctions/MapSideBar.js'\nimport Distance from  './MapHelperFunctions/Distance.js'\nimport IsOnLine from './MapHelperFunctions/IsOnLine.js'\nimport MapImg from './MapHelperFunctions/MapImg.js'\nimport RenderArrows from './MapHelperFunctions/RenderArrows.js'\nimport RenderCircles from './MapHelperFunctions/RenderCircles.js'\n\n\n\nexport default function LiveCoachMap() {\n  return (\n    <Container fluid id=\"mapContainer\">\n      <NoteView />\n      <Row id=\"mapRow\">\n        <Map />\n      </Row>\n    </Container>\n  );\n}\n\nclass Map extends Component {\n\n  state = {\n    lines: [],\n    circlePoints: [],\n    arrowPoints: [],\n    currentTool: 'brush',\n    eraser: false,\n    brush: true,\n    circle: false,\n    arrow: false,\n  };\n\n\n\n  makeElement = (elementArray) => {\n    const stage = this.stageRef.getStage();\n    const point = stage.getPointerPosition();\n    const tempArray = elementArray;\n    tempArray[tempArray.length - 1][1] = [point.x, point.y];\n    this.setState({\n      elementArray: tempArray\n    })\n  }\n\n\n\n  handleMouseDown = () => {\n    this._drawing = true;\n\n    if(this.state.brush === true){\n      this.setState({\n        lines: [...this.state.lines, []]\n      });\n    }\n    else if(this.state.eraser === true) {\n\n      //get mouse pointer position\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n\n\n      console.log('ERASING pointX: ' + point.x +' point y ' + point.y)\n\n\n\n                      //Check to see if an arrow will be erased instead\n\n      const tempArrows = this.state.arrowPoints;\n      //loop through each arrow in tempArrows\n      for(let i = 0; i < tempArrows.length; i++) {\n        const currentArrow = tempArrows[i];\n        const startpoint = currentArrow[0]\n        const endpoint = currentArrow[1]\n        const slope = (endpoint[1] - startpoint[1]) / (endpoint[0] - startpoint[0])\n        //function of line in between each point.\n        if (IsOnLine(startpoint, endpoint, [point.x, point.y], slope)) {\n          tempArrows.splice(i, 1);\n          this.setState({\n            arrowPoints: tempArrows\n          })\n          return;\n        }\n      }\n\n                    //Check to see if circle will be erased\n\n      const tempCircles = this.state.circlePoints;\n      for(let i = 0; i < tempCircles.length; i++) {\n        console.log('Here')\n        const currentCircle = tempCircles[i];\n        const midpoint = currentCircle[0];\n        const radius = Distance(currentCircle[0], currentCircle[1]);\n        const radiusRange = [radius + 10, radius - 10];\n        const pointDistance = Distance([point.x,point.y], midpoint);\n        if(pointDistance < radiusRange[1] && pointDistance > radiusRange[0]) {\n          tempCircles.splice(i, 1);\n          this.setState({\n            circlePoints: tempCircles\n          });\n          return;\n        }\n      }\n\n                    //Set up ranges for eraser so that user only has to click close to line.\n      const xRange = [point.x - 15, point.x + 15]\n      const yRange = [point.y - 15, point.y + 15]\n      const tempLines = this.state.lines;\n      //loop through each line in templines\n      for(let i = 0; i < tempLines.length; i++) {\n        const currentLine = tempLines[i];\n        //loop through each value, the value z will be the index for the x-value of the point, making z + 1 the y value of that point\n        for(let z = 0; z < currentLine.length - 1; z = z+2) {\n          //Check to see if x value of point lies within the range\n          if(currentLine[z] > xRange[0] && currentLine[z] < xRange[1]) {\n            //Check to see if y value of point lies within the range\n            if(currentLine[z+1] > yRange[0] && currentLine[z+1] < yRange[1]) {\n              //deletes a line\n              tempLines.splice(i, 1);\n              this.setState ({\n                lines: tempLines\n              });\n              return;\n            }\n          }\n        }\n      }\n\n    //End of Eraser\n    }\n    else if (this.state.circle === true) {\n      //create new entry in circlePoints\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      this.setState({\n        circlePoints: [...this.state.circlePoints, [[point.x, point.y], [point.x, point.y]]]\n      });\n    }\n    else if (this.state.arrow === true) {\n      //create new entry in arrowPoints\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n\n      this.setState({\n        arrowPoints: [...this.state.arrowPoints, [[point.x, point.y], [point.x, point.y]]]\n      });\n    }\n\n  };\n\n\n\n\n  handleMouseMove = e => {\n    if (!this._drawing) {\n      return;\n    }\n\n    if(this.state.brush === true) {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const { lines } = this.state;\n\n      let lastLine = lines[lines.length - 1];\n      // add point\n      lastLine = lastLine.concat([point.x, point.y]);\n\n      // replace last\n      lines.splice(lines.length - 1, 1, lastLine);\n      this.setState({\n        lines: lines.concat()\n      });\n    }\n    else if (this.state.circle === true) {\n      this.makeElement(this.state.circlePoints)\n    }\n    else if (this.state.arrow === true) {\n      this.makeElement(this.state.arrowPoints)\n    }\n  };\n\n\n  handleMouseUp = () => {\n    this._drawing = false;\n  };\n\n\n\n\n  eraserClick = (evt) => {\n    this.setState ({\n      eraser: true,\n      currentTool: 'eraser',\n      brush: false,\n      circle: false,\n      arrow: false,\n    })\n  }\n\n  brushClick = (evt) => {\n    this.setState ({\n      eraser: false,\n      currentTool: 'brush',\n      brush: true,\n      circle: false,\n      arrow: false,\n    })\n  }\n\n  clearClick = (evt) => {\n    this.setState ({\n      lines: [],\n      circlePoints: [],\n      arrowPoints: [],\n\n    })\n  }\n\n  circleClick = (evt) => {\n    this.setState ({\n      eraser: false,\n      currentTool: 'circle',\n      brush: false,\n      circle: true,\n      arrow: false,\n    })\n  }\n\n  arrowClick = (evt) => {\n    this.setState ({\n      eraser: false,\n      currentTool: 'arrow',\n      brush: false,\n      circle: false,\n      arrow: true,\n    })\n  }\n\n\n\n  render() {\n    const stageWidth = window.innerWidth / 2.4;\n    const stageHeight = window.innerWidth / 2.4;\n\n    return (\n      <div id=\"MapDiv\">\n        <MapSideBar\n          brushClick={this.brushClick}\n          arrowClick={this.arrowClick}\n          circleClick={this.circleClick}\n          clearClick={this.clearClick}\n          eraserClick={this.eraserClick}\n          currentTool={this.state.currentTool}\n        />\n        <Stage\n          container={'#mapRow'}\n          width={stageWidth}\n          height={stageHeight}\n          onContentMousedown={this.handleMouseDown}\n          onContentMousemove={this.handleMouseMove}\n          onContentMouseup={this.handleMouseUp}\n          ref={node => {\n            this.stageRef = node;\n          }}\n        >\n          <Layer>\n            <MapImg />\n          </Layer>\n          <Layer>\n            {\n              RenderCircles(this.state.circlePoints)\n            }\n          </Layer>\n          <Layer>\n            {\n              RenderArrows(this.state.arrowPoints)\n            }\n          </Layer>\n          <Layer>\n            {\n              this.state.lines.map((line, i) => (<Line key={i} points={line} stroke=\"red\" fill={'red'}/>))\n            }\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}