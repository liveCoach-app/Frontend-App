{"ast":null,"code":"var _jsxFileName = \"/Users/felixtoft/Git Repos/liveCoach/Frontend-App/src/LiveCoachView/LiveCoachMap.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './CoachLive.css';\nimport { Stage, Layer, Rect, Text, Circle, Line, Image, Group, Arrow } from 'react-konva';\nimport Konva from 'konva';\nimport useImage from 'use-image';\nimport NoteView from './NoteView.js';\nimport MapSideBar from './MapSideBar.js';\nimport Distance from '../HelperFunctions/Distance.js';\nexport default function Map() {\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    id: \"mapContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NoteView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    id: \"mapRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Drawing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  })));\n}\n\nconst MapImg = () => {\n  const [image] = useImage('http://ddragon.leagueoflegends.com/cdn/6.8.1/img/map/map11.png');\n  return /*#__PURE__*/React.createElement(Image, {\n    image: image,\n    width: window.innerWidth / 2.4,\n    height: window.innerWidth / 2.4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 10\n    }\n  });\n};\n\nconst IsOnLine = (startpoint, endpoint, aPoint, slope) => {\n  //uses line formula to calculate top and bottom range with a buffer distance of 25\n  const topRange = slope * (aPoint[0] - startpoint[0]) + startpoint[1] + 25;\n  const bottomRange = slope * (aPoint[0] - startpoint[0]) + startpoint[1] - 25; //calculates the distance from one point to the other\n\n  const lineDistance = Distance(startpoint, endpoint);\n\n  if (aPoint[1] < topRange && aPoint[1] > bottomRange) {\n    // The formula above will erase points that are not in between each line, this\n    // checks to make sure the line is within the two points boundaries.\n    if (Distance(startpoint, aPoint) < lineDistance && Distance(endpoint, aPoint) < lineDistance) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nclass Drawing extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lines: [],\n      circlePoints: [],\n      arrowPoints: [],\n      currentTool: 'brush',\n      eraser: false,\n      brush: true,\n      circle: false,\n      arrow: false\n    };\n\n    this.makeElement = elementArray => {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const tempArray = elementArray;\n      tempArray[tempArray.length - 1][1] = [point.x, point.y];\n      this.setState({\n        elementArray: tempArray\n      });\n    };\n\n    this.handleMouseDown = () => {\n      this._drawing = true;\n\n      if (this.state.brush === true) {\n        // add line\n        this.setState({\n          lines: [...this.state.lines, []]\n        });\n      } else if (this.state.eraser === true) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        const xRange = [point.x - 15, point.x + 15];\n        const yRange = [point.y - 15, point.y + 15];\n        console.log('ERASING pointX: ' + point.x + ' point y ' + point.y);\n        const tempLines = this.state.lines;\n\n        for (let i = 0; i < tempLines.length; i++) {\n          const currentLine = tempLines[i];\n\n          for (let z = 0; z < currentLine.length - 1; z = z + 2) {\n            if (currentLine[z] > xRange[0] && currentLine[z] < xRange[1]) {\n              if (currentLine[z + 1] > yRange[0] && currentLine[z + 1] < yRange[1]) {\n                tempLines.splice(i, 1);\n                this.setState({\n                  lines: tempLines\n                });\n                return;\n              }\n            }\n          }\n        }\n\n        const tempArrows = this.state.arrowPoints;\n\n        for (let i = 0; i < tempArrows.length; i++) {\n          const currentArrow = tempArrows[i];\n          const startpoint = currentArrow[0];\n          const endpoint = currentArrow[1];\n          const slope = (endpoint[1] - startpoint[1]) / (endpoint[0] - startpoint[0]);\n\n          if (IsOnLine(startpoint, endpoint, [point.x, point.y], slope)) {\n            tempArrows.splice(i, 1);\n            this.setState({\n              arrowPoints: tempArrows\n            });\n            return;\n          }\n        }\n      } else if (this.state.circle === true) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        this.setState({\n          circlePoints: [...this.state.circlePoints, [[point.x, point.y], [point.x, point.y]]]\n        });\n      } else if (this.state.arrow === true) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        this.setState({\n          arrowPoints: [...this.state.arrowPoints, [[point.x, point.y], [point.x, point.y]]]\n        });\n      }\n    };\n\n    this.handleMouseMove = e => {\n      if (!this._drawing) {\n        return;\n      }\n\n      if (this.state.brush === true) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        const {\n          lines\n        } = this.state;\n        let lastLine = lines[lines.length - 1]; // add point\n\n        lastLine = lastLine.concat([point.x, point.y]); // replace last\n\n        lines.splice(lines.length - 1, 1, lastLine);\n        this.setState({\n          lines: lines.concat()\n        });\n      } else if (this.state.circle === true) {\n        this.makeElement(this.state.circlePoints);\n      } else if (this.state.arrow === true) {\n        this.makeElement(this.state.arrowPoints);\n      }\n    };\n\n    this.handleMouseUp = () => {\n      this._drawing = false;\n    };\n\n    this.eraserClick = evt => {\n      this.setState({\n        eraser: true,\n        currentTool: 'eraser',\n        brush: false,\n        circle: false,\n        arrow: false\n      });\n    };\n\n    this.brushClick = evt => {\n      this.setState({\n        eraser: false,\n        currentTool: 'brush',\n        brush: true,\n        circle: false,\n        arrow: false\n      });\n    };\n\n    this.clearClick = evt => {\n      this.setState({\n        lines: [],\n        circlePoints: [],\n        arrowPoints: []\n      });\n    };\n\n    this.circleClick = evt => {\n      this.setState({\n        eraser: false,\n        currentTool: 'circle',\n        brush: false,\n        circle: true,\n        arrow: false\n      });\n    };\n\n    this.arrowClick = evt => {\n      this.setState({\n        eraser: false,\n        currentTool: 'arrow',\n        brush: false,\n        circle: false,\n        arrow: true\n      });\n    };\n\n    this.RenderCircles = () => {\n      let circleArray = [];\n      const circlePoints = this.state.circlePoints;\n\n      for (let i = 0; i < circlePoints.length; i++) {\n        const midpoint = circlePoints[i][0];\n        const endpoint = circlePoints[i][1];\n        const distance = Distance(endpoint, midpoint);\n        circleArray.push( /*#__PURE__*/React.createElement(Circle, {\n          key: i,\n          x: midpoint[0],\n          y: midpoint[1],\n          width: distance * 2,\n          height: distance * 2,\n          stroke: 'blue',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 7\n          }\n        }));\n      }\n\n      return circleArray;\n    };\n\n    this.RenderArrows = () => {\n      let arrowArray = [];\n      const arrowPoints = this.state.arrowPoints;\n      arrowPoints.map((arrow, i) => {\n        const startpoint = arrow[0];\n        const endpoint = arrow[1];\n        arrowArray.push( /*#__PURE__*/React.createElement(Arrow, {\n          key: i,\n          points: [startpoint[0], startpoint[1], endpoint[0], endpoint[1]],\n          fill: 'red',\n          stroke: 'red',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 9\n          }\n        }));\n      });\n      return arrowArray;\n    };\n  }\n\n  render() {\n    const stageWidth = window.innerWidth / 2.4;\n    const stageHeight = window.innerWidth / 2.4;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"MapDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MapSideBar, {\n      brushClick: this.brushClick,\n      arrowClick: this.arrowClick,\n      circleClick: this.circleClick,\n      clearClick: this.clearClick,\n      eraserClick: this.eraserClick,\n      currentTool: this.state.currentTool,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Stage, {\n      container: '#mapRow',\n      width: stageWidth,\n      height: stageHeight,\n      onContentMousedown: this.handleMouseDown,\n      onContentMousemove: this.handleMouseMove,\n      onContentMouseup: this.handleMouseUp,\n      ref: node => {\n        this.stageRef = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(MapImg, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }\n    }, this.RenderCircles()), /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }\n    }, this.RenderArrows()), /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }\n    }, this.state.lines.map((line, i) => /*#__PURE__*/React.createElement(Line, {\n      key: i,\n      points: line,\n      stroke: \"red\",\n      fill: 'red',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 50\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/felixtoft/Git Repos/liveCoach/Frontend-App/src/LiveCoachView/LiveCoachMap.js"],"names":["React","Component","Container","Row","Col","Stage","Layer","Rect","Text","Circle","Line","Image","Group","Arrow","Konva","useImage","NoteView","MapSideBar","Distance","Map","MapImg","image","window","innerWidth","IsOnLine","startpoint","endpoint","aPoint","slope","topRange","bottomRange","lineDistance","Drawing","state","lines","circlePoints","arrowPoints","currentTool","eraser","brush","circle","arrow","makeElement","elementArray","stage","stageRef","getStage","point","getPointerPosition","tempArray","length","x","y","setState","handleMouseDown","_drawing","xRange","yRange","console","log","tempLines","i","currentLine","z","splice","tempArrows","currentArrow","handleMouseMove","e","lastLine","concat","handleMouseUp","eraserClick","evt","brushClick","clearClick","circleClick","arrowClick","RenderCircles","circleArray","midpoint","distance","push","RenderArrows","arrowArray","map","render","stageWidth","stageHeight","node","line"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,sCAAP;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAO,iBAAP;AAGA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,MAAnC,EAA2CC,IAA3C,EAAiDC,KAAjD,EAAwDC,KAAxD,EAA+DC,KAA/D,QAA4E,aAA5E;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,QAAP,MAAsB,gCAAtB;AAIA,eAAe,SAASC,GAAT,GAAe;AAC5B,sBACE,oBAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAiB,IAAA,EAAE,EAAC,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF;AAQD;;AAGD,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAM,CAACC,KAAD,IAAUN,QAAQ,CAAC,gEAAD,CAAxB;AACA,sBAAO,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEM,KAAd;AAAqB,IAAA,KAAK,EAAEC,MAAM,CAACC,UAAP,GAAoB,GAAhD;AAAqD,IAAA,MAAM,EAAED,MAAM,CAACC,UAAP,GAAoB,GAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAHD;;AAKA,MAAMC,QAAQ,GAAG,CAACC,UAAD,EAAaC,QAAb,EAAuBC,MAAvB,EAA+BC,KAA/B,KAAyC;AAExD;AACA,QAAMC,QAAQ,GAAGD,KAAK,IAAID,MAAM,CAAC,CAAD,CAAN,GAAYF,UAAU,CAAC,CAAD,CAA1B,CAAL,GAAsCA,UAAU,CAAC,CAAD,CAAhD,GAAsD,EAAvE;AACA,QAAMK,WAAW,GAAGF,KAAK,IAAID,MAAM,CAAC,CAAD,CAAN,GAAYF,UAAU,CAAC,CAAD,CAA1B,CAAL,GAAsCA,UAAU,CAAC,CAAD,CAAhD,GAAsD,EAA1E,CAJwD,CAMxD;;AACA,QAAMM,YAAY,GAAGb,QAAQ,CAACO,UAAD,EAAaC,QAAb,CAA7B;;AACA,MAAIC,MAAM,CAAC,CAAD,CAAN,GAAYE,QAAZ,IAAwBF,MAAM,CAAC,CAAD,CAAN,GAAYG,WAAxC,EAAqD;AAEnD;AACA;AACA,QAAGZ,QAAQ,CAACO,UAAD,EAAaE,MAAb,CAAR,GAA+BI,YAA/B,IAA+Cb,QAAQ,CAACQ,QAAD,EAAUC,MAAV,CAAR,GAA4BI,YAA9E,EAA4F;AAC1F,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAjBD;;AAsBA,MAAMC,OAAN,SAAsB/B,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAE9BgC,KAF8B,GAEtB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,YAAY,EAAE,EAFR;AAGNC,MAAAA,WAAW,EAAE,EAHP;AAINC,MAAAA,WAAW,EAAE,OAJP;AAKNC,MAAAA,MAAM,EAAE,KALF;AAMNC,MAAAA,KAAK,EAAE,IAND;AAONC,MAAAA,MAAM,EAAE,KAPF;AAQNC,MAAAA,KAAK,EAAE;AARD,KAFsB;;AAAA,SAc9BC,WAd8B,GAcfC,YAAD,IAAkB;AAC9B,YAAMC,KAAK,GAAG,KAAKC,QAAL,CAAcC,QAAd,EAAd;AACA,YAAMC,KAAK,GAAGH,KAAK,CAACI,kBAAN,EAAd;AACA,YAAMC,SAAS,GAAGN,YAAlB;AACAM,MAAAA,SAAS,CAACA,SAAS,CAACC,MAAV,GAAmB,CAApB,CAAT,CAAgC,CAAhC,IAAqC,CAACH,KAAK,CAACI,CAAP,EAAUJ,KAAK,CAACK,CAAhB,CAArC;AACA,WAAKC,QAAL,CAAc;AACZV,QAAAA,YAAY,EAAEM;AADF,OAAd;AAGD,KAtB6B;;AAAA,SA0B9BK,eA1B8B,GA0BZ,MAAM;AAEtB,WAAKC,QAAL,GAAgB,IAAhB;;AAEA,UAAG,KAAKtB,KAAL,CAAWM,KAAX,KAAqB,IAAxB,EAA6B;AAE3B;AACA,aAAKc,QAAL,CAAc;AACZnB,UAAAA,KAAK,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,EAAsB,EAAtB;AADK,SAAd;AAGD,OAND,MAOK,IAAG,KAAKD,KAAL,CAAWK,MAAX,KAAsB,IAAzB,EAA+B;AAClC,cAAMM,KAAK,GAAG,KAAKC,QAAL,CAAcC,QAAd,EAAd;AACA,cAAMC,KAAK,GAAGH,KAAK,CAACI,kBAAN,EAAd;AACA,cAAMQ,MAAM,GAAG,CAACT,KAAK,CAACI,CAAN,GAAU,EAAX,EAAeJ,KAAK,CAACI,CAAN,GAAU,EAAzB,CAAf;AACA,cAAMM,MAAM,GAAG,CAACV,KAAK,CAACK,CAAN,GAAU,EAAX,EAAeL,KAAK,CAACK,CAAN,GAAU,EAAzB,CAAf;AAEAM,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBZ,KAAK,CAACI,CAA3B,GAA8B,WAA9B,GAA4CJ,KAAK,CAACK,CAA9D;AAEA,cAAMQ,SAAS,GAAG,KAAK3B,KAAL,CAAWC,KAA7B;;AAEA,aAAI,IAAI2B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,SAAS,CAACV,MAA7B,EAAqCW,CAAC,EAAtC,EAA0C;AACxC,gBAAMC,WAAW,GAAGF,SAAS,CAACC,CAAD,CAA7B;;AAEA,eAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,WAAW,CAACZ,MAAZ,GAAqB,CAAxC,EAA2Ca,CAAC,GAAGA,CAAC,GAAC,CAAjD,EAAoD;AAElD,gBAAGD,WAAW,CAACC,CAAD,CAAX,GAAiBP,MAAM,CAAC,CAAD,CAAvB,IAA8BM,WAAW,CAACC,CAAD,CAAX,GAAiBP,MAAM,CAAC,CAAD,CAAxD,EAA6D;AAC3D,kBAAGM,WAAW,CAACC,CAAC,GAAG,CAAL,CAAX,GAAqBN,MAAM,CAAC,CAAD,CAA3B,IAAkCK,WAAW,CAACC,CAAC,GAAG,CAAL,CAAX,GAAqBN,MAAM,CAAC,CAAD,CAAhE,EAAqE;AACnEG,gBAAAA,SAAS,CAACI,MAAV,CAAiBH,CAAjB,EAAoB,CAApB;AAEA,qBAAKR,QAAL,CAAe;AACbnB,kBAAAA,KAAK,EAAE0B;AADM,iBAAf;AAGA;AACD;AACF;AACF;AACF;;AACD,cAAMK,UAAU,GAAG,KAAKhC,KAAL,CAAWG,WAA9B;;AACA,aAAI,IAAIyB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGI,UAAU,CAACf,MAA9B,EAAsCW,CAAC,EAAvC,EAA2C;AACzC,gBAAMK,YAAY,GAAGD,UAAU,CAACJ,CAAD,CAA/B;AACA,gBAAMpC,UAAU,GAAGyC,YAAY,CAAC,CAAD,CAA/B;AACA,gBAAMxC,QAAQ,GAAGwC,YAAY,CAAC,CAAD,CAA7B;AAEA,gBAAMtC,KAAK,GAAG,CAACF,QAAQ,CAAC,CAAD,CAAR,GAAcD,UAAU,CAAC,CAAD,CAAzB,KAAiCC,QAAQ,CAAC,CAAD,CAAR,GAAcD,UAAU,CAAC,CAAD,CAAzD,CAAd;;AAIA,cAAID,QAAQ,CAACC,UAAD,EAAaC,QAAb,EAAuB,CAACqB,KAAK,CAACI,CAAP,EAAUJ,KAAK,CAACK,CAAhB,CAAvB,EAA2CxB,KAA3C,CAAZ,EAA+D;AAC7DqC,YAAAA,UAAU,CAACD,MAAX,CAAkBH,CAAlB,EAAqB,CAArB;AACA,iBAAKR,QAAL,CAAc;AACZjB,cAAAA,WAAW,EAAE6B;AADD,aAAd;AAGA;AACD;AAEF;AAIF,OAjDI,MAkDA,IAAI,KAAKhC,KAAL,CAAWO,MAAX,KAAsB,IAA1B,EAAgC;AACnC,cAAMI,KAAK,GAAG,KAAKC,QAAL,CAAcC,QAAd,EAAd;AACA,cAAMC,KAAK,GAAGH,KAAK,CAACI,kBAAN,EAAd;AACA,aAAKK,QAAL,CAAc;AACZlB,UAAAA,YAAY,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,YAAf,EAA6B,CAAC,CAACY,KAAK,CAACI,CAAP,EAAUJ,KAAK,CAACK,CAAhB,CAAD,EAAqB,CAACL,KAAK,CAACI,CAAP,EAAUJ,KAAK,CAACK,CAAhB,CAArB,CAA7B;AADF,SAAd;AAGD,OANI,MAOA,IAAI,KAAKnB,KAAL,CAAWQ,KAAX,KAAqB,IAAzB,EAA+B;AAClC,cAAMG,KAAK,GAAG,KAAKC,QAAL,CAAcC,QAAd,EAAd;AACA,cAAMC,KAAK,GAAGH,KAAK,CAACI,kBAAN,EAAd;AACA,aAAKK,QAAL,CAAc;AACZjB,UAAAA,WAAW,EAAE,CAAC,GAAG,KAAKH,KAAL,CAAWG,WAAf,EAA4B,CAAC,CAACW,KAAK,CAACI,CAAP,EAAUJ,KAAK,CAACK,CAAhB,CAAD,EAAqB,CAACL,KAAK,CAACI,CAAP,EAAUJ,KAAK,CAACK,CAAhB,CAArB,CAA5B;AADD,SAAd;AAGD;AACF,KArG6B;;AAAA,SAuG9Be,eAvG8B,GAuGZC,CAAC,IAAI;AAErB,UAAI,CAAC,KAAKb,QAAV,EAAoB;AAClB;AACD;;AAED,UAAG,KAAKtB,KAAL,CAAWM,KAAX,KAAqB,IAAxB,EAA8B;AAC5B,cAAMK,KAAK,GAAG,KAAKC,QAAL,CAAcC,QAAd,EAAd;AACA,cAAMC,KAAK,GAAGH,KAAK,CAACI,kBAAN,EAAd;AACA,cAAM;AAAEd,UAAAA;AAAF,YAAY,KAAKD,KAAvB;AAEA,YAAIoC,QAAQ,GAAGnC,KAAK,CAACA,KAAK,CAACgB,MAAN,GAAe,CAAhB,CAApB,CAL4B,CAM5B;;AACAmB,QAAAA,QAAQ,GAAGA,QAAQ,CAACC,MAAT,CAAgB,CAACvB,KAAK,CAACI,CAAP,EAAUJ,KAAK,CAACK,CAAhB,CAAhB,CAAX,CAP4B,CAS5B;;AACAlB,QAAAA,KAAK,CAAC8B,MAAN,CAAa9B,KAAK,CAACgB,MAAN,GAAe,CAA5B,EAA+B,CAA/B,EAAkCmB,QAAlC;AACA,aAAKhB,QAAL,CAAc;AACZnB,UAAAA,KAAK,EAAEA,KAAK,CAACoC,MAAN;AADK,SAAd;AAGD,OAdD,MAeK,IAAI,KAAKrC,KAAL,CAAWO,MAAX,KAAsB,IAA1B,EAAgC;AACnC,aAAKE,WAAL,CAAiB,KAAKT,KAAL,CAAWE,YAA5B;AACD,OAFI,MAGA,IAAI,KAAKF,KAAL,CAAWQ,KAAX,KAAqB,IAAzB,EAA+B;AAClC,aAAKC,WAAL,CAAiB,KAAKT,KAAL,CAAWG,WAA5B;AACD;AACF,KAlI6B;;AAAA,SAoI9BmC,aApI8B,GAoId,MAAM;AACpB,WAAKhB,QAAL,GAAgB,KAAhB;AAGD,KAxI6B;;AAAA,SA2I9BiB,WA3I8B,GA2IfC,GAAD,IAAS;AAErB,WAAKpB,QAAL,CAAe;AACbf,QAAAA,MAAM,EAAE,IADK;AAEbD,QAAAA,WAAW,EAAE,QAFA;AAGbE,QAAAA,KAAK,EAAE,KAHM;AAIbC,QAAAA,MAAM,EAAE,KAJK;AAKbC,QAAAA,KAAK,EAAE;AALM,OAAf;AAOD,KApJ6B;;AAAA,SAsJ9BiC,UAtJ8B,GAsJhBD,GAAD,IAAS;AACpB,WAAKpB,QAAL,CAAe;AACbf,QAAAA,MAAM,EAAE,KADK;AAEbD,QAAAA,WAAW,EAAE,OAFA;AAGbE,QAAAA,KAAK,EAAE,IAHM;AAIbC,QAAAA,MAAM,EAAE,KAJK;AAKbC,QAAAA,KAAK,EAAE;AALM,OAAf;AAOD,KA9J6B;;AAAA,SAgK9BkC,UAhK8B,GAgKhBF,GAAD,IAAS;AACpB,WAAKpB,QAAL,CAAe;AACbnB,QAAAA,KAAK,EAAE,EADM;AAEbC,QAAAA,YAAY,EAAE,EAFD;AAGbC,QAAAA,WAAW,EAAE;AAHA,OAAf;AAMD,KAvK6B;;AAAA,SAyK9BwC,WAzK8B,GAyKfH,GAAD,IAAS;AACrB,WAAKpB,QAAL,CAAe;AACbf,QAAAA,MAAM,EAAE,KADK;AAEbD,QAAAA,WAAW,EAAE,QAFA;AAGbE,QAAAA,KAAK,EAAE,KAHM;AAIbC,QAAAA,MAAM,EAAE,IAJK;AAKbC,QAAAA,KAAK,EAAE;AALM,OAAf;AAOD,KAjL6B;;AAAA,SAmL9BoC,UAnL8B,GAmLhBJ,GAAD,IAAS;AACpB,WAAKpB,QAAL,CAAe;AACbf,QAAAA,MAAM,EAAE,KADK;AAEbD,QAAAA,WAAW,EAAE,OAFA;AAGbE,QAAAA,KAAK,EAAE,KAHM;AAIbC,QAAAA,MAAM,EAAE,KAJK;AAKbC,QAAAA,KAAK,EAAE;AALM,OAAf;AAOD,KA3L6B;;AAAA,SA8L9BqC,aA9L8B,GA8Ld,MAAM;AAEpB,UAAIC,WAAW,GAAG,EAAlB;AACA,YAAM5C,YAAY,GAAG,KAAKF,KAAL,CAAWE,YAAhC;;AACA,WAAI,IAAI0B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG1B,YAAY,CAACe,MAAhC,EAAwCW,CAAC,EAAzC,EAA6C;AAC3C,cAAMmB,QAAQ,GAAG7C,YAAY,CAAC0B,CAAD,CAAZ,CAAgB,CAAhB,CAAjB;AACA,cAAMnC,QAAQ,GAAGS,YAAY,CAAC0B,CAAD,CAAZ,CAAgB,CAAhB,CAAjB;AAEA,cAAMoB,QAAQ,GAAG/D,QAAQ,CAACQ,QAAD,EAAWsD,QAAX,CAAzB;AACAD,QAAAA,WAAW,CAACG,IAAZ,eACA,oBAAC,MAAD;AACE,UAAA,GAAG,EAAErB,CADP;AAEE,UAAA,CAAC,EAAEmB,QAAQ,CAAC,CAAD,CAFb;AAGE,UAAA,CAAC,EAAEA,QAAQ,CAAC,CAAD,CAHb;AAIE,UAAA,KAAK,EAAEC,QAAQ,GAAG,CAJpB;AAKE,UAAA,MAAM,EAAEA,QAAQ,GAAG,CALrB;AAME,UAAA,MAAM,EAAE,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAWD;;AACD,aAAOF,WAAP;AACD,KApN6B;;AAAA,SAuN9BI,YAvN8B,GAuNf,MAAM;AACnB,UAAIC,UAAU,GAAG,EAAjB;AACA,YAAMhD,WAAW,GAAG,KAAKH,KAAL,CAAWG,WAA/B;AACAA,MAAAA,WAAW,CAACiD,GAAZ,CAAgB,CAAC5C,KAAD,EAAQoB,CAAR,KAAc;AAC5B,cAAMpC,UAAU,GAAGgB,KAAK,CAAC,CAAD,CAAxB;AACA,cAAMf,QAAQ,GAAGe,KAAK,CAAC,CAAD,CAAtB;AACA2C,QAAAA,UAAU,CAACF,IAAX,eACE,oBAAC,KAAD;AACE,UAAA,GAAG,EAAErB,CADP;AAEE,UAAA,MAAM,EAAE,CAACpC,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,EAA+BC,QAAQ,CAAC,CAAD,CAAvC,EAA4CA,QAAQ,CAAC,CAAD,CAApD,CAFV;AAGE,UAAA,IAAI,EAAE,KAHR;AAIE,UAAA,MAAM,EAAE,KAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,OAZD;AAaA,aAAO0D,UAAP;AACD,KAxO6B;AAAA;;AA0O9BE,EAAAA,MAAM,GAAG;AACP,UAAMC,UAAU,GAAGjE,MAAM,CAACC,UAAP,GAAoB,GAAvC;AACA,UAAMiE,WAAW,GAAGlE,MAAM,CAACC,UAAP,GAAoB,GAAxC;AAEA,wBACE;AAAK,MAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAE,KAAKmD,UADnB;AAEE,MAAA,UAAU,EAAE,KAAKG,UAFnB;AAGE,MAAA,WAAW,EAAE,KAAKD,WAHpB;AAIE,MAAA,UAAU,EAAE,KAAKD,UAJnB;AAKE,MAAA,WAAW,EAAE,KAAKH,WALpB;AAME,MAAA,WAAW,EAAE,KAAKvC,KAAL,CAAWI,WAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eASE,oBAAC,KAAD;AACE,MAAA,SAAS,EAAE,SADb;AAEE,MAAA,KAAK,EAAEkD,UAFT;AAGE,MAAA,MAAM,EAAEC,WAHV;AAIE,MAAA,kBAAkB,EAAE,KAAKlC,eAJ3B;AAKE,MAAA,kBAAkB,EAAE,KAAKa,eAL3B;AAME,MAAA,gBAAgB,EAAE,KAAKI,aANzB;AAOE,MAAA,GAAG,EAAEkB,IAAI,IAAI;AACX,aAAK5C,QAAL,GAAgB4C,IAAhB;AACD,OATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAWE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAXF,eAcE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,KAAKX,aAAL,EAFJ,CAdF,eAmBE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,KAAKK,YAAL,EAFJ,CAnBF,eAwBE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,KAAKlD,KAAL,CAAWC,KAAX,CAAiBmD,GAAjB,CAAqB,CAACK,IAAD,EAAO7B,CAAP,kBAAc,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,CAAX;AAAc,MAAA,MAAM,EAAE6B,IAAtB;AAA4B,MAAA,MAAM,EAAC,KAAnC;AAAyC,MAAA,IAAI,EAAE,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnC,CAFJ,CAxBF,CATF,CADF;AA0CD;;AAxR6B","sourcesContent":["import React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './CoachLive.css';\n\n\nimport { Stage, Layer, Rect, Text, Circle, Line, Image, Group, Arrow } from 'react-konva';\nimport Konva from 'konva';\nimport useImage from 'use-image';\n\nimport NoteView from './NoteView.js'\nimport MapSideBar from './MapSideBar.js'\nimport Distance from  '../HelperFunctions/Distance.js'\n\n\n\nexport default function Map() {\n  return (\n    <Container fluid id=\"mapContainer\">\n      <NoteView />\n      <Row id=\"mapRow\">\n        <Drawing />\n      </Row>\n    </Container>\n  );\n}\n\n\nconst MapImg = () => {\n  const [image] = useImage('http://ddragon.leagueoflegends.com/cdn/6.8.1/img/map/map11.png');\n  return <Image image={image} width={window.innerWidth / 2.4} height={window.innerWidth / 2.4}/>;\n};\n\nconst IsOnLine = (startpoint, endpoint, aPoint, slope) => {\n\n  //uses line formula to calculate top and bottom range with a buffer distance of 25\n  const topRange = slope * (aPoint[0] - startpoint[0]) + startpoint[1] + 25;\n  const bottomRange = slope * (aPoint[0] - startpoint[0]) + startpoint[1] - 25;\n\n  //calculates the distance from one point to the other\n  const lineDistance = Distance(startpoint, endpoint)\n  if( aPoint[1] < topRange && aPoint[1] > bottomRange) {\n\n    // The formula above will erase points that are not in between each line, this\n    // checks to make sure the line is within the two points boundaries.\n    if(Distance(startpoint, aPoint) < lineDistance && Distance(endpoint,aPoint) < lineDistance) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\n\n\nclass Drawing extends Component {\n\n  state = {\n    lines: [],\n    circlePoints: [],\n    arrowPoints: [],\n    currentTool: 'brush',\n    eraser: false,\n    brush: true,\n    circle: false,\n    arrow: false,\n  };\n\n\n  makeElement = (elementArray) => {\n    const stage = this.stageRef.getStage();\n    const point = stage.getPointerPosition();\n    const tempArray = elementArray;\n    tempArray[tempArray.length - 1][1] = [point.x, point.y];\n    this.setState({\n      elementArray: tempArray\n    })\n  }\n\n\n\n  handleMouseDown = () => {\n\n    this._drawing = true;\n\n    if(this.state.brush === true){\n\n      // add line\n      this.setState({\n        lines: [...this.state.lines, []]\n      });\n    }\n    else if(this.state.eraser === true) {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const xRange = [point.x - 15, point.x + 15]\n      const yRange = [point.y - 15, point.y + 15]\n\n      console.log('ERASING pointX: ' + point.x +' point y ' + point.y)\n\n      const tempLines = this.state.lines;\n\n      for(let i = 0; i < tempLines.length; i++) {\n        const currentLine = tempLines[i];\n\n        for(let z = 0; z < currentLine.length - 1; z = z+2) {\n\n          if(currentLine[z] > xRange[0] && currentLine[z] < xRange[1]) {\n            if(currentLine[z + 1] > yRange[0] && currentLine[z + 1] < yRange[1]) {\n              tempLines.splice(i, 1);\n\n              this.setState ({\n                lines: tempLines\n              });\n              return;\n            }\n          }\n        }\n      }\n      const tempArrows = this.state.arrowPoints;\n      for(let i = 0; i < tempArrows.length; i++) {\n        const currentArrow = tempArrows[i];\n        const startpoint = currentArrow[0]\n        const endpoint = currentArrow[1]\n\n        const slope = (endpoint[1] - startpoint[1]) / (endpoint[0] - startpoint[0])\n\n\n\n        if (IsOnLine(startpoint, endpoint, [point.x, point.y], slope)) {\n          tempArrows.splice(i, 1);\n          this.setState({\n            arrowPoints: tempArrows\n          })\n          return;\n        }\n\n      }\n\n\n\n    }\n    else if (this.state.circle === true) {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      this.setState({\n        circlePoints: [...this.state.circlePoints, [[point.x, point.y], [point.x, point.y]]]\n      });\n    }\n    else if (this.state.arrow === true) {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      this.setState({\n        arrowPoints: [...this.state.arrowPoints, [[point.x, point.y], [point.x, point.y]]]\n      });\n    }\n  };\n\n  handleMouseMove = e => {\n\n    if (!this._drawing) {\n      return;\n    }\n\n    if(this.state.brush === true) {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const { lines } = this.state;\n\n      let lastLine = lines[lines.length - 1];\n      // add point\n      lastLine = lastLine.concat([point.x, point.y]);\n\n      // replace last\n      lines.splice(lines.length - 1, 1, lastLine);\n      this.setState({\n        lines: lines.concat()\n      });\n    }\n    else if (this.state.circle === true) {\n      this.makeElement(this.state.circlePoints)\n    }\n    else if (this.state.arrow === true) {\n      this.makeElement(this.state.arrowPoints)\n    }\n  };\n\n  handleMouseUp = () => {\n    this._drawing = false;\n\n\n  };\n\n\n  eraserClick = (evt) => {\n\n    this.setState ({\n      eraser: true,\n      currentTool: 'eraser',\n      brush: false,\n      circle: false,\n      arrow: false,\n    })\n  }\n\n  brushClick = (evt) => {\n    this.setState ({\n      eraser: false,\n      currentTool: 'brush',\n      brush: true,\n      circle: false,\n      arrow: false,\n    })\n  }\n\n  clearClick = (evt) => {\n    this.setState ({\n      lines: [],\n      circlePoints: [],\n      arrowPoints: [],\n\n    })\n  }\n\n  circleClick = (evt) => {\n    this.setState ({\n      eraser: false,\n      currentTool: 'circle',\n      brush: false,\n      circle: true,\n      arrow: false,\n    })\n  }\n\n  arrowClick = (evt) => {\n    this.setState ({\n      eraser: false,\n      currentTool: 'arrow',\n      brush: false,\n      circle: false,\n      arrow: true,\n    })\n  }\n\n\n  RenderCircles = () => {\n\n    let circleArray = []\n    const circlePoints = this.state.circlePoints;\n    for(let i = 0; i < circlePoints.length; i++) {\n      const midpoint = circlePoints[i][0]\n      const endpoint = circlePoints[i][1]\n\n      const distance = Distance(endpoint, midpoint)\n      circleArray.push(\n      <Circle\n        key={i}\n        x={midpoint[0]}\n        y={midpoint[1]}\n        width={distance * 2}\n        height={distance * 2}\n        stroke={'blue'}\n\n      />\n    )\n    }\n    return circleArray;\n  }\n\n\n  RenderArrows = () => {\n    let arrowArray = []\n    const arrowPoints = this.state.arrowPoints\n    arrowPoints.map((arrow, i) => {\n      const startpoint = arrow[0]\n      const endpoint = arrow[1]\n      arrowArray.push(\n        <Arrow\n          key={i}\n          points={[startpoint[0], startpoint[1], endpoint[0], endpoint[1]]}\n          fill={'red'}\n          stroke={'red'}\n        />\n      )\n\n    })\n    return arrowArray;\n  }\n\n  render() {\n    const stageWidth = window.innerWidth / 2.4;\n    const stageHeight = window.innerWidth / 2.4;\n\n    return (\n      <div id=\"MapDiv\">\n        <MapSideBar\n          brushClick={this.brushClick}\n          arrowClick={this.arrowClick}\n          circleClick={this.circleClick}\n          clearClick={this.clearClick}\n          eraserClick={this.eraserClick}\n          currentTool={this.state.currentTool}\n        />\n        <Stage\n          container={'#mapRow'}\n          width={stageWidth}\n          height={stageHeight}\n          onContentMousedown={this.handleMouseDown}\n          onContentMousemove={this.handleMouseMove}\n          onContentMouseup={this.handleMouseUp}\n          ref={node => {\n            this.stageRef = node;\n          }}\n        >\n          <Layer>\n            <MapImg />\n          </Layer>\n          <Layer>\n            {\n              this.RenderCircles()\n            }\n          </Layer>\n          <Layer>\n            {\n              this.RenderArrows()\n            }\n          </Layer>\n          <Layer>\n            {\n              this.state.lines.map((line, i) => (<Line key={i} points={line} stroke=\"red\" fill={'red'}/>))\n            }\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}