{"ast":null,"code":"var _jsxFileName = \"/Users/felixtoft/Git Repos/liveCoach/Frontend-App/src/LiveCoachView/LiveCoachMap.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './CoachLive.css';\nimport { Stage, Layer, Rect, Text, Circle, Line, Image, Group } from 'react-konva';\nimport Konva from 'konva';\nimport NoteView from './NoteView.js';\nexport default function Map() {\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    id: \"mapContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NoteView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    id: \"mapRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Drawing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  })));\n} // CODE SNIPPET FOUND ONLINE, DON'T FULLY UNDERSTAND YET\n\nclass Drawing extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lines: [],\n      erasing: false\n    };\n\n    this.handleMouseDown = () => {\n      this._drawing = true;\n\n      if (this.state.erasing === false) {\n        // add line\n        this.setState({\n          lines: [...this.state.lines, []]\n        });\n      } else if (this.state.erasing === true) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        const xRange = [point.x - 1, point.x + 1];\n        console.log('xrange ' + xRange);\n        const ySegment = currentLine[z + 1];\n        const yRange = [point.y - 1, point.y + 1];\n        console.log('yrange ' + yRange);\n        console.log('ERASING pointX: ' + point.x + ' point y ' + point.y);\n        const tempLines = this.state.lines;\n\n        for (let i = 0; i < tempLines.length; i++) {\n          const currentLine = tempLines[i];\n          console.log(currentLine);\n\n          for (let z = 0; z < currentLine.length - 1; z = z + 2) {\n            if (currentLine[z] > xRange[0] && currentLine[z] < xRange[1]) {\n              console.log('FOUND X     FOUND X');\n\n              if (pcurrentLine[z + 1] > yRange[0] && currentLine[z + 1] < yRange[1]) {\n                console.log('FOUND Y        FOUND Y');\n                tempLines.splice(i, 1);\n                this.setState({\n                  lines: tempLines\n                });\n              }\n            }\n          }\n        }\n      }\n    };\n\n    this.handleMouseMove = e => {\n      // no drawing - skipping\n      //  alert('drawing ' + !this._drawing + ' erasing ' + this.state.erasing)\n      if (!this._drawing) {\n        return;\n      }\n\n      if (this.state.erasing === false) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        const {\n          lines\n        } = this.state;\n        console.log(this.state.lines);\n        let lastLine = lines[lines.length - 1]; // add point\n\n        lastLine = lastLine.concat([point.x, point.y]); // replace last\n\n        lines.splice(lines.length - 1, 1, lastLine);\n        this.setState({\n          lines: lines.concat()\n        });\n      }\n    };\n\n    this.handleMouseUp = () => {\n      this._drawing = false;\n    };\n\n    this.handleClick = evt => {\n      const currentEraserState = this.state.erasing;\n      alert(!currentEraserState);\n      this.setState({\n        erasing: !currentEraserState\n      });\n    };\n  }\n\n  render() {\n    const stageWidth = 600;\n    const stageHeight = 600;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, \"Hello\"), /*#__PURE__*/React.createElement(Stage, {\n      container: '#mapRow',\n      width: stageWidth,\n      height: stageHeight,\n      onContentMousedown: this.handleMouseDown,\n      onContentMousemove: this.handleMouseMove,\n      onContentMouseup: this.handleMouseUp,\n      ref: node => {\n        this.stageRef = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Rect, {\n      width: stageWidth,\n      height: stageHeight,\n      fill: 'white',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }), this.state.lines.map((line, i) => /*#__PURE__*/React.createElement(Line, {\n      key: i,\n      points: line,\n      stroke: \"red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/felixtoft/Git Repos/liveCoach/Frontend-App/src/LiveCoachView/LiveCoachMap.js"],"names":["React","Component","Container","Row","Col","Stage","Layer","Rect","Text","Circle","Line","Image","Group","Konva","NoteView","Map","Drawing","state","lines","erasing","handleMouseDown","_drawing","setState","stage","stageRef","getStage","point","getPointerPosition","xRange","x","console","log","ySegment","currentLine","z","yRange","y","tempLines","i","length","pcurrentLine","splice","handleMouseMove","e","lastLine","concat","handleMouseUp","handleClick","evt","currentEraserState","alert","render","stageWidth","stageHeight","node","map","line"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './CoachLive.css';\n\n\nimport { Stage, Layer, Rect, Text, Circle, Line, Image, Group } from 'react-konva';\nimport Konva from 'konva';\nimport NoteView from './NoteView.js'\n\n\nexport default function Map() {\n\n  return (\n    <Container fluid id=\"mapContainer\">\n      <NoteView />\n      <Row id=\"mapRow\">\n        <Drawing />\n      </Row>\n    </Container>\n  );\n}\n\n\n// CODE SNIPPET FOUND ONLINE, DON'T FULLY UNDERSTAND YET\n\nclass Drawing extends Component {\n  state = {\n    lines: [],\n    erasing: false\n  };\n\n  handleMouseDown = () => {\n      this._drawing = true;\n\n      if(this.state.erasing === false){\n        // add line\n        this.setState({\n          lines: [...this.state.lines, []]\n        });\n      }\n      else if(this.state.erasing === true) {\n\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n\n        const xRange = [point.x - 1, point.x + 1]\n        console.log('xrange ' + xRange)\n\n        const ySegment = currentLine[z+1];\n        const yRange = [point.y - 1, point.y + 1]\n        console.log('yrange ' + yRange)\n\n\n\n\n        console.log('ERASING pointX: ' + point.x +' point y ' + point.y)\n\n        const tempLines = this.state.lines;\n\n        for(let i = 0; i < tempLines.length; i++) {\n          const currentLine = tempLines[i];\n          console.log(currentLine)\n\n          for(let z = 0; z < currentLine.length - 1; z = z+2) {\n\n            if(currentLine[z] > xRange[0] && currentLine[z] < xRange[1]) {\n              console.log('FOUND X     FOUND X')\n              if(pcurrentLine[z + 1] > yRange[0] && currentLine[z + 1] < yRange[1]) {\n\n                console.log('FOUND Y        FOUND Y');\n                tempLines.splice(i, 1);\n\n                this.setState ({\n                  lines: tempLines\n                });\n              }\n            }\n          }\n        }\n      }\n  };\n\n  handleMouseMove = e => {\n    // no drawing - skipping\n    //  alert('drawing ' + !this._drawing + ' erasing ' + this.state.erasing)\n\n    if (!this._drawing) {\n      return;\n    }\n\n    if(this.state.erasing === false) {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const { lines } = this.state;\n      console.log(this.state.lines)\n\n      let lastLine = lines[lines.length - 1];\n      // add point\n      lastLine = lastLine.concat([point.x, point.y]);\n\n      // replace last\n      lines.splice(lines.length - 1, 1, lastLine);\n      this.setState({\n        lines: lines.concat()\n      });\n    }\n\n  };\n\n  handleMouseUp = () => {\n    this._drawing = false;\n  };\n\n  handleClick = (evt) => {\n    const currentEraserState = this.state.erasing;\n    alert(!currentEraserState);\n    this.setState ({\n      erasing: !currentEraserState\n    })\n  }\n\n  render() {\n    const stageWidth = 600;\n    const stageHeight = 600;\n\n    return (\n      <div>\n        <button onClick={this.handleClick}>Hello</button>\n        <Stage\n          container={'#mapRow'}\n          width={stageWidth}\n          height={stageHeight}\n          onContentMousedown={this.handleMouseDown}\n          onContentMousemove={this.handleMouseMove}\n          onContentMouseup={this.handleMouseUp}\n          ref={node => {\n            this.stageRef = node;\n          }}\n        >\n          <Layer>\n            <Rect\n            width={stageWidth}\n            height={stageHeight}\n              fill={'white'}\n            />\n\n            {this.state.lines.map((line, i) => (\n              <Line key={i} points={line} stroke=\"red\" />\n            ))}\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}