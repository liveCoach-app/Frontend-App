{"ast":null,"code":"var _jsxFileName = \"/Users/felixtoft/Git Repos/liveCoach/Frontend-App/src/LiveCoachView/LiveCoachMap.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './CoachLive.css';\nimport { Stage, Layer, Rect, Text, Circle, Line, Image, Group, Arrow } from 'react-konva';\nimport Konva from 'konva';\nimport NoteView from './NoteView.js';\nimport useImage from 'use-image';\nexport default function Map() {\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    id: \"mapContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NoteView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    id: \"mapRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Drawing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  })));\n}\n\nconst MapImg = () => {\n  const [image] = useImage('http://ddragon.leagueoflegends.com/cdn/6.8.1/img/map/map11.png');\n  return /*#__PURE__*/React.createElement(Image, {\n    image: image,\n    width: window.innerWidth / 2.4,\n    height: window.innerWidth / 2.4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  });\n};\n\nclass Drawing extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lines: [],\n      circlePoints: [],\n      arrowPoints: [],\n      currentTool: 'brush',\n      eraser: false,\n      brush: true,\n      circle: false,\n      arrow: false\n    };\n\n    this.makeElement = elementArray => {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const tempArray = elementArray;\n      tempArray[tempArray.length - 1][1] = [point.x, point.y];\n      this.setState({\n        elementArray: tempArray\n      });\n    };\n\n    this.handleMouseDown = () => {\n      this._drawing = true;\n\n      if (this.state.brush === true) {\n        // add line\n        this.setState({\n          lines: [...this.state.lines, []]\n        });\n      } else if (this.state.eraser === true) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        const xRange = [point.x - 15, point.x + 15];\n        const yRange = [point.y - 15, point.y + 15];\n        console.log('ERASING pointX: ' + point.x + ' point y ' + point.y);\n        const tempLines = this.state.lines;\n\n        for (let i = 0; i < tempLines.length; i++) {\n          const currentLine = tempLines[i];\n\n          for (let z = 0; z < currentLine.length - 1; z = z + 2) {\n            if (currentLine[z] > xRange[0] && currentLine[z] < xRange[1]) {\n              if (currentLine[z + 1] > yRange[0] && currentLine[z + 1] < yRange[1]) {\n                tempLines.splice(i, 1);\n                this.setState({\n                  lines: tempLines\n                });\n                return;\n              }\n            }\n          }\n        }\n      } else if (this.state.circle === true) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        this.setState({\n          circlePoints: [...this.state.circlePoints, [[point.x, point.y], [point.x, point.y]]]\n        });\n      } else if (this.state.arrow === true) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        this.setState({\n          arrowPoints: [...this.state.arrowPoints, [[point.x, point.y], [point.x, point.y]]]\n        });\n      }\n    };\n\n    this.handleMouseMove = e => {\n      if (!this._drawing) {\n        return;\n      }\n\n      if (this.state.brush === true) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        const {\n          lines\n        } = this.state;\n        let lastLine = lines[lines.length - 1]; // add point\n\n        lastLine = lastLine.concat([point.x, point.y]); // replace last\n\n        lines.splice(lines.length - 1, 1, lastLine);\n        this.setState({\n          lines: lines.concat()\n        });\n      } else if (this.state.circle === true) {\n        this.makeElement(this.state.circlePoints);\n      } else if (this.state.arrow === true) {\n        this.makeElement(this.state.arrowPoints);\n      }\n    };\n\n    this.handleMouseUp = () => {\n      this._drawing = false;\n    };\n\n    this.eraserClick = evt => {\n      alert('eraser on');\n      this.setState({\n        eraser: true,\n        currentTool: 'eraser',\n        brush: false,\n        circle: false,\n        arrow: false\n      });\n    };\n\n    this.brushClick = evt => {\n      alert('brush on');\n      this.setState({\n        eraser: false,\n        currentTool: 'brush',\n        brush: true,\n        circle: false,\n        arrow: false\n      });\n    };\n\n    this.clearClick = evt => {\n      alert('Cleared All');\n      this.setState({\n        lines: [],\n        circlePoints: []\n      });\n    };\n\n    this.circleClick = evt => {\n      alert('circle on');\n      this.setState({\n        eraser: false,\n        currentTool: 'circle',\n        brush: false,\n        circle: true,\n        arrow: false\n      });\n    };\n\n    this.arrowClick = evt => {\n      alert('arrow on');\n      this.setState({\n        eraser: false,\n        currentTool: 'arrow',\n        brush: false,\n        circle: false,\n        arrow: true\n      });\n    };\n\n    this.RenderCircles = () => {\n      let circleArray = [];\n      const circlePoints = this.state.circlePoints;\n\n      for (let i = 0; i < circlePoints.length; i++) {\n        const midpoint = circlePoints[i][0];\n        const endpoint = circlePoints[i][1];\n        console.log('midpoint: ' + midpoint + ' endpoint: ' + endpoint);\n        const xsquared = (endpoint[0] - midpoint[0]) * (endpoint[0] - midpoint[0]);\n        const ysquared = (endpoint[1] - midpoint[1]) * (endpoint[1] - midpoint[1]);\n        const distance = Math.sqrt(xsquared + ysquared);\n        circleArray.push( /*#__PURE__*/React.createElement(Circle, {\n          key: i,\n          x: midpoint[0],\n          y: midpoint[1],\n          width: distance * 2,\n          height: distance * 2,\n          stroke: 'blue',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 7\n          }\n        }));\n      }\n\n      return circleArray;\n    };\n\n    this.RenderArrows = () => {\n      let arrowArray = [];\n      const arrowPoints = this.state.arrowPoints;\n      arrowPoints.map((arrow, i) => {\n        const startpoint = arrow[0];\n        const endpoint = arrow[1];\n        arrowArray.push( /*#__PURE__*/React.createElement(Arrow, {\n          key: i,\n          points: [startpoint[0], startpoint[1], endpoint[0], endpoint[1]],\n          fill: 'red',\n          stroke: 'red',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 9\n          }\n        }));\n      });\n      return arrowArray;\n    };\n  }\n\n  render() {\n    const stageWidth = window.innerWidth / 2.4;\n    const stageHeight = window.innerWidth / 2.4;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"MapDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.brushClick,\n      id: \"brushButton\",\n      className: this.state.currentTool === 'brush' ? 'activeTool' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }\n    }, \"Brush\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.arrowClick,\n      id: \"arrowButton\",\n      className: this.state.currentTool === 'arrow' ? 'activeTool' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 13\n      }\n    }, \"Arrow\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.eraserClick,\n      id: \"eraserButton\",\n      className: this.state.currentTool === 'eraser' ? 'activeTool' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 13\n      }\n    }, \"Eraser\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.circleClick,\n      id: \"circleButton\",\n      className: this.state.currentTool === 'circle' ? 'activeTool' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 13\n      }\n    }, \"Circle\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.clearClick,\n      id: \"clearButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 13\n      }\n    }, \"Clear\"))), /*#__PURE__*/React.createElement(Stage, {\n      container: '#mapRow',\n      width: stageWidth,\n      height: stageHeight,\n      onContentMousedown: this.handleMouseDown,\n      onContentMousemove: this.handleMouseMove,\n      onContentMouseup: this.handleMouseUp,\n      ref: node => {\n        this.stageRef = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(MapImg, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }\n    }, this.RenderCircles()), /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }\n    }, this.RenderArrows()), /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }\n    }, this.state.lines.map((line, i) => /*#__PURE__*/React.createElement(Line, {\n      key: i,\n      points: line,\n      stroke: \"red\",\n      fill: 'red',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 50\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/felixtoft/Git Repos/liveCoach/Frontend-App/src/LiveCoachView/LiveCoachMap.js"],"names":["React","Component","Container","Row","Col","Stage","Layer","Rect","Text","Circle","Line","Image","Group","Arrow","Konva","NoteView","useImage","Map","MapImg","image","window","innerWidth","Drawing","state","lines","circlePoints","arrowPoints","currentTool","eraser","brush","circle","arrow","makeElement","elementArray","stage","stageRef","getStage","point","getPointerPosition","tempArray","length","x","y","setState","handleMouseDown","_drawing","xRange","yRange","console","log","tempLines","i","currentLine","z","splice","handleMouseMove","e","lastLine","concat","handleMouseUp","eraserClick","evt","alert","brushClick","clearClick","circleClick","arrowClick","RenderCircles","circleArray","midpoint","endpoint","xsquared","ysquared","distance","Math","sqrt","push","RenderArrows","arrowArray","map","startpoint","render","stageWidth","stageHeight","node","line"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './CoachLive.css';\n\n\nimport { Stage, Layer, Rect, Text, Circle, Line, Image, Group, Arrow } from 'react-konva';\nimport Konva from 'konva';\nimport NoteView from './NoteView.js'\nimport useImage from 'use-image';\n\n\nexport default function Map() {\n  return (\n    <Container fluid id=\"mapContainer\">\n      <NoteView />\n      <Row id=\"mapRow\">\n        <Drawing />\n      </Row>\n    </Container>\n  );\n}\n\n\nconst MapImg = () => {\n  const [image] = useImage('http://ddragon.leagueoflegends.com/cdn/6.8.1/img/map/map11.png');\n  return <Image image={image} width={window.innerWidth / 2.4} height={window.innerWidth / 2.4}/>;\n};\n\n\n\nclass Drawing extends Component {\n\n  state = {\n    lines: [],\n    circlePoints: [],\n    arrowPoints: [],\n    currentTool: 'brush',\n    eraser: false,\n    brush: true,\n    circle: false,\n    arrow: false,\n  };\n\n\n  makeElement = (elementArray) => {\n    const stage = this.stageRef.getStage();\n    const point = stage.getPointerPosition();\n    const tempArray = elementArray;\n    tempArray[tempArray.length - 1][1] = [point.x, point.y];\n    this.setState({\n      elementArray: tempArray\n    })\n  }\n\n\n\n  handleMouseDown = () => {\n\n    this._drawing = true;\n\n    if(this.state.brush === true){\n\n      // add line\n      this.setState({\n        lines: [...this.state.lines, []]\n      });\n    }\n    else if(this.state.eraser === true) {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const xRange = [point.x - 15, point.x + 15]\n      const yRange = [point.y - 15, point.y + 15]\n\n      console.log('ERASING pointX: ' + point.x +' point y ' + point.y)\n\n      const tempLines = this.state.lines;\n\n      for(let i = 0; i < tempLines.length; i++) {\n        const currentLine = tempLines[i];\n\n        for(let z = 0; z < currentLine.length - 1; z = z+2) {\n\n          if(currentLine[z] > xRange[0] && currentLine[z] < xRange[1]) {\n            if(currentLine[z + 1] > yRange[0] && currentLine[z + 1] < yRange[1]) {\n              tempLines.splice(i, 1);\n\n              this.setState ({\n                lines: tempLines\n              });\n              return;\n            }\n          }\n        }\n      }\n    }\n    else if (this.state.circle === true) {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      this.setState({\n        circlePoints: [...this.state.circlePoints, [[point.x, point.y], [point.x, point.y]]]\n      });\n    }\n    else if (this.state.arrow === true) {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      this.setState({\n        arrowPoints: [...this.state.arrowPoints, [[point.x, point.y], [point.x, point.y]]]\n      });\n    }\n  };\n\n  handleMouseMove = e => {\n\n    if (!this._drawing) {\n      return;\n    }\n\n    if(this.state.brush === true) {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const { lines } = this.state;\n\n      let lastLine = lines[lines.length - 1];\n      // add point\n      lastLine = lastLine.concat([point.x, point.y]);\n\n      // replace last\n      lines.splice(lines.length - 1, 1, lastLine);\n      this.setState({\n        lines: lines.concat()\n      });\n    }\n    else if (this.state.circle === true) {\n      this.makeElement(this.state.circlePoints)\n    }\n    else if (this.state.arrow === true) {\n      this.makeElement(this.state.arrowPoints)\n    }\n  };\n\n  handleMouseUp = () => {\n    this._drawing = false;\n\n\n  };\n\n\n  eraserClick = (evt) => {\n    alert('eraser on');\n    this.setState ({\n      eraser: true,\n      currentTool: 'eraser',\n      brush: false,\n      circle: false,\n      arrow: false,\n    })\n  }\n\n  brushClick = (evt) => {\n    alert('brush on');\n    this.setState ({\n      eraser: false,\n      currentTool: 'brush',\n      brush: true,\n      circle: false,\n      arrow: false,\n    })\n  }\n\n  clearClick = (evt) => {\n    alert('Cleared All');\n    this.setState ({\n      lines: [],\n      circlePoints: [],\n    })\n  }\n\n  circleClick = (evt) => {\n    alert('circle on');\n    this.setState ({\n      eraser: false,\n      currentTool: 'circle',\n      brush: false,\n      circle: true,\n      arrow: false,\n    })\n  }\n\n  arrowClick = (evt) => {\n    alert('arrow on');\n    this.setState ({\n      eraser: false,\n      currentTool: 'arrow',\n      brush: false,\n      circle: false,\n      arrow: true,\n    })\n  }\n\n\n  RenderCircles = () => {\n\n    let circleArray = []\n    const circlePoints = this.state.circlePoints;\n    for(let i = 0; i < circlePoints.length; i++) {\n      const midpoint = circlePoints[i][0]\n      const endpoint = circlePoints[i][1]\n      console.log('midpoint: ' + midpoint + ' endpoint: ' + endpoint);\n\n\n      const xsquared = (endpoint[0] - midpoint[0]) * (endpoint[0] - midpoint[0]);\n      const ysquared = (endpoint[1] - midpoint[1]) * (endpoint[1] - midpoint[1]);\n      const distance = Math.sqrt(xsquared + ysquared);\n      circleArray.push(\n      <Circle\n        key={i}\n        x={midpoint[0]}\n        y={midpoint[1]}\n        width={distance * 2}\n        height={distance * 2}\n        stroke={'blue'}\n\n      />\n    )\n    }\n    return circleArray;\n  }\n\n\n  RenderArrows = () => {\n    let arrowArray = []\n    const arrowPoints = this.state.arrowPoints\n    arrowPoints.map((arrow, i) => {\n      const startpoint = arrow[0]\n      const endpoint = arrow[1]\n      arrowArray.push(\n        <Arrow\n          key={i}\n          points={[startpoint[0], startpoint[1], endpoint[0], endpoint[1]]}\n          fill={'red'}\n          stroke={'red'}\n        />\n      )\n\n    })\n    return arrowArray;\n  }\n\n  render() {\n    const stageWidth = window.innerWidth / 2.4;\n    const stageHeight = window.innerWidth / 2.4;\n\n    return (\n      <div id=\"MapDiv\">\n        <Container>\n          <Row>\n            <button\n              onClick={this.brushClick}\n              id=\"brushButton\"\n              className={this.state.currentTool === 'brush' ? 'activeTool' : ''}\n            >\n              Brush\n            </button>\n          </Row>\n          <Row>\n            <button\n              onClick={this.arrowClick}\n              id=\"arrowButton\"\n              className={this.state.currentTool === 'arrow' ? 'activeTool' : ''}\n            >\n              Arrow\n            </button>\n          </Row>\n          <Row>\n            <button\n              onClick={this.eraserClick}\n              id=\"eraserButton\"\n              className={this.state.currentTool === 'eraser' ? 'activeTool' : ''}\n            >\n              Eraser\n            </button>\n          </Row>\n          <Row>\n            <button\n              onClick={this.circleClick}\n              id=\"circleButton\"\n              className={this.state.currentTool === 'circle' ? 'activeTool' : ''}\n            >\n              Circle\n            </button>\n          </Row>\n          <Row>\n            <button\n              onClick={this.clearClick}\n              id=\"clearButton\"\n            >\n              Clear\n            </button>\n          </Row>\n\n        </Container>\n\n\n        <Stage\n          container={'#mapRow'}\n          width={stageWidth}\n          height={stageHeight}\n          onContentMousedown={this.handleMouseDown}\n          onContentMousemove={this.handleMouseMove}\n          onContentMouseup={this.handleMouseUp}\n          ref={node => {\n            this.stageRef = node;\n          }}\n        >\n          <Layer>\n            <MapImg />\n          </Layer>\n          <Layer>\n            {\n              this.RenderCircles()\n            }\n          </Layer>\n          <Layer>\n            {\n              this.RenderArrows()\n            }\n          </Layer>\n          <Layer>\n            {\n              this.state.lines.map((line, i) => (<Line key={i} points={line} stroke=\"red\" fill={'red'}/>))\n            }\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}