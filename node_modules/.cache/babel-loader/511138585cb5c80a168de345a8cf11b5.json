{"ast":null,"code":"var _jsxFileName = \"/Users/felixtoft/Git Repos/liveCoach/Frontend-App/src/LiveCoachView/LiveCoachMap.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './CoachLive.css';\nimport { Stage, Layer, Rect, Text, Circle, Line, Image, Group } from 'react-konva';\nimport Konva from 'konva';\nimport NoteView from './NoteView.js';\nimport useImage from 'use-image';\nexport default function Map() {\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    id: \"mapContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NoteView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    id: \"mapRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Drawing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  })));\n}\n\nconst MapImg = () => {\n  const [image] = useImage('http://ddragon.leagueoflegends.com/cdn/6.8.1/img/map/map11.png');\n  return /*#__PURE__*/React.createElement(Image, {\n    image: image,\n    width: 600,\n    height: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  });\n};\n\nclass Drawing extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lines: [],\n      circlePoints: [],\n      currentTool: 'brush',\n      eraser: false,\n      brush: true,\n      circle: false\n    };\n\n    this.handleMouseDown = () => {\n      this._drawing = true;\n\n      if (this.state.brush === true) {\n        // add line\n        this.setState({\n          lines: [...this.state.lines, []]\n        });\n      } else if (this.state.eraser === true) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        const xRange = [point.x - 15, point.x + 15];\n        const yRange = [point.y - 15, point.y + 15];\n        console.log('ERASING pointX: ' + point.x + ' point y ' + point.y);\n        const tempLines = this.state.lines;\n\n        for (let i = 0; i < tempLines.length; i++) {\n          const currentLine = tempLines[i];\n\n          for (let z = 0; z < currentLine.length - 1; z = z + 2) {\n            if (currentLine[z] > xRange[0] && currentLine[z] < xRange[1]) {\n              if (currentLine[z + 1] > yRange[0] && currentLine[z + 1] < yRange[1]) {\n                tempLines.splice(i, 1);\n                this.setState({\n                  lines: tempLines\n                });\n                return;\n              }\n            }\n          }\n        }\n      } else if (this.state.circle === true) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        const tempCircles = this.state.circlePoints;\n        this.setState({\n          circlePoints: [...this.state.circlePoints, [[point.x, point.y]]]\n        });\n      }\n    };\n\n    this.handleMouseMove = e => {\n      // const stage = this.stageRef.getStage();\n      // const point = stage.getPointerPosition();\n      // console.log('x is ' + point.x + 'y is ' + point.y)\n      if (!this._drawing) {\n        return;\n      }\n\n      if (this.state.brush === true) {\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        const {\n          lines\n        } = this.state;\n        let lastLine = lines[lines.length - 1]; // add point\n\n        lastLine = lastLine.concat([point.x, point.y]); // replace last\n\n        lines.splice(lines.length - 1, 1, lastLine);\n        this.setState({\n          lines: lines.concat()\n        });\n      } else if (this.state.circle === true) {\n        console.log('drawing!');\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        const tempCircles = this.state.circlePoints;\n        tempCircles[tempCircles.length - 1].push([point.x, point.y]);\n        this.setState({\n          circlePoints: tempCircles\n        });\n      }\n    };\n\n    this.handleMouseUp = () => {\n      this._drawing = false;\n\n      if (this.state.circle === true) {\n        console.log('here');\n        const stage = this.stageRef.getStage();\n        const point = stage.getPointerPosition();\n        const tempCircles = this.state.circlePoints;\n        tempCircles[tempCircles.length - 1].push([point.x, point.y]);\n        console.log(tempCircles);\n        this.setState({\n          circlePoints: tempCircles\n        });\n      }\n    };\n\n    this.eraserClick = evt => {\n      alert('eraser on');\n      this.setState({\n        eraser: true,\n        currentTool: 'eraser',\n        brush: false,\n        circle: false\n      });\n    };\n\n    this.brushClick = evt => {\n      alert('brush on');\n      this.setState({\n        eraser: false,\n        currentTool: 'brush',\n        brush: true,\n        circle: false\n      });\n    };\n\n    this.clearClick = evt => {\n      alert('Cleared All');\n      this.setState({\n        lines: [],\n        circlePoints: []\n      });\n    };\n\n    this.circleClick = evt => {\n      alert('circle on');\n      this.setState({\n        eraser: false,\n        currentTool: 'circle',\n        brush: false,\n        circle: true\n      });\n    };\n\n    this.RenderCircles = () => {\n      let circleArray = [];\n      const circlePoints = this.state.circlePoints;\n\n      for (let i = 0; i < circlePoints.length; i++) {\n        console.log(circlePoints[i]);\n        const startpoint = circlePoints[i][0];\n        const endpoint = circlePoints[i][circlePoints[i].length - 1];\n        const midpoint = [(endpoint[0] + startpoint[0]) / 2, (endpoint[1] + startpoint[1]) / 2];\n        const widthVal = Math.abs(endpoint[0] - startpoint[0]);\n        const heightval = Math.abs(endpoint[1] - startpoint[1]);\n        circleArray.push( /*#__PURE__*/React.createElement(Circle, {\n          key: i,\n          x: midpoint[0],\n          y: midpoint[1],\n          width: widthVal,\n          height: heightval,\n          fill: 'Blue',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 9\n          }\n        }));\n      }\n\n      return circleArray;\n    };\n  }\n\n  render() {\n    const stageWidth = 600;\n    const stageHeight = 600;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.brushClick,\n      id: \"brushButton\",\n      className: this.state.currentTool === 'brush' ? 'activeTool' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }, \"Brush\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.eraserClick,\n      id: \"eraserButton\",\n      className: this.state.currentTool === 'eraser' ? 'activeTool' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }\n    }, \"Eraser\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.circleClick,\n      id: \"circleButton\",\n      className: this.state.currentTool === 'circle' ? 'activeTool' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }\n    }, \"Circle\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.clearClick,\n      id: \"clearButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }\n    }, \"Clear\"))), /*#__PURE__*/React.createElement(Stage, {\n      container: '#mapRow',\n      width: stageWidth,\n      height: stageHeight,\n      onContentMousedown: this.handleMouseDown,\n      onContentMousemove: this.handleMouseMove,\n      onContentMouseup: this.handleMouseUp,\n      ref: node => {\n        this.stageRef = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(MapImg, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }\n    }, this.RenderCircles()), /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }\n    }, this.state.lines.map((line, i) => /*#__PURE__*/React.createElement(Line, {\n      key: i,\n      points: line,\n      stroke: \"red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 50\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/felixtoft/Git Repos/liveCoach/Frontend-App/src/LiveCoachView/LiveCoachMap.js"],"names":["React","Component","Container","Row","Col","Stage","Layer","Rect","Text","Circle","Line","Image","Group","Konva","NoteView","useImage","Map","MapImg","image","Drawing","state","lines","circlePoints","currentTool","eraser","brush","circle","handleMouseDown","_drawing","setState","stage","stageRef","getStage","point","getPointerPosition","xRange","x","yRange","y","console","log","tempLines","i","length","currentLine","z","splice","tempCircles","handleMouseMove","e","lastLine","concat","push","handleMouseUp","eraserClick","evt","alert","brushClick","clearClick","circleClick","RenderCircles","circleArray","startpoint","endpoint","midpoint","widthVal","Math","abs","heightval","render","stageWidth","stageHeight","node","map","line"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './CoachLive.css';\n\n\nimport { Stage, Layer, Rect, Text, Circle, Line, Image, Group } from 'react-konva';\nimport Konva from 'konva';\nimport NoteView from './NoteView.js'\nimport useImage from 'use-image';\n\n\nexport default function Map() {\n  return (\n    <Container fluid id=\"mapContainer\">\n      <NoteView />\n      <Row id=\"mapRow\">\n        <Drawing />\n      </Row>\n    </Container>\n  );\n}\n\n\nconst MapImg = () => {\n  const [image] = useImage('http://ddragon.leagueoflegends.com/cdn/6.8.1/img/map/map11.png');\n  return <Image image={image} width={600} height={600}/>;\n};\n\n\n\nclass Drawing extends Component {\n\n  state = {\n    lines: [],\n    circlePoints: [],\n    currentTool: 'brush',\n    eraser: false,\n    brush: true,\n    circle: false,\n  };\n\n\n\n  handleMouseDown = () => {\n\n    this._drawing = true;\n\n    if(this.state.brush === true){\n\n      // add line\n      this.setState({\n        lines: [...this.state.lines, []]\n      });\n    }\n    else if(this.state.eraser === true) {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const xRange = [point.x - 15, point.x + 15]\n      const yRange = [point.y - 15, point.y + 15]\n\n      console.log('ERASING pointX: ' + point.x +' point y ' + point.y)\n\n      const tempLines = this.state.lines;\n\n      for(let i = 0; i < tempLines.length; i++) {\n        const currentLine = tempLines[i];\n\n        for(let z = 0; z < currentLine.length - 1; z = z+2) {\n\n          if(currentLine[z] > xRange[0] && currentLine[z] < xRange[1]) {\n            if(currentLine[z + 1] > yRange[0] && currentLine[z + 1] < yRange[1]) {\n              tempLines.splice(i, 1);\n\n              this.setState ({\n                lines: tempLines\n              });\n              return;\n            }\n          }\n        }\n      }\n    }\n    else if (this.state.circle === true) {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const tempCircles = this.state.circlePoints;\n      this.setState({\n        circlePoints: [...this.state.circlePoints, [[point.x, point.y]]]\n      });\n    }\n  };\n\n  handleMouseMove = e => {\n    // const stage = this.stageRef.getStage();\n    // const point = stage.getPointerPosition();\n    // console.log('x is ' + point.x + 'y is ' + point.y)\n\n    if (!this._drawing) {\n      return;\n    }\n\n    if(this.state.brush === true) {\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const { lines } = this.state;\n\n      let lastLine = lines[lines.length - 1];\n      // add point\n      lastLine = lastLine.concat([point.x, point.y]);\n\n      // replace last\n      lines.splice(lines.length - 1, 1, lastLine);\n      this.setState({\n        lines: lines.concat()\n      });\n    }\n    else if (this.state.circle === true) {\n      console.log('drawing!')\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const tempCircles = this.state.circlePoints;\n      tempCircles[tempCircles.length - 1].push([point.x, point.y])\n      this.setState({\n        circlePoints: tempCircles\n      })\n\n\n\n    }\n  };\n\n\n  handleMouseUp = () => {\n    this._drawing = false;\n    if(this.state.circle === true) {\n      console.log('here')\n      const stage = this.stageRef.getStage();\n      const point = stage.getPointerPosition();\n      const tempCircles = this.state.circlePoints;\n      tempCircles[tempCircles.length - 1].push([point.x, point.y])\n\n      console.log(tempCircles);\n      this.setState({\n        circlePoints: tempCircles\n      })\n    }\n  };\n\n\n  eraserClick = (evt) => {\n    alert('eraser on');\n    this.setState ({\n      eraser: true,\n      currentTool: 'eraser',\n      brush: false,\n      circle: false,\n    })\n  }\n\n  brushClick = (evt) => {\n    alert('brush on');\n    this.setState ({\n      eraser: false,\n      currentTool: 'brush',\n      brush: true,\n      circle: false,\n    })\n  }\n\n  clearClick = (evt) => {\n    alert('Cleared All');\n    this.setState ({\n      lines: [],\n      circlePoints: [],\n    })\n  }\n\n  circleClick = (evt) => {\n    alert('circle on');\n    this.setState ({\n      eraser: false,\n      currentTool: 'circle',\n      brush: false,\n      circle: true,\n    })\n  }\n\n\n  RenderCircles = () => {\n\n    let circleArray = []\n    const circlePoints = this.state.circlePoints;\n    for(let i = 0; i < circlePoints.length; i++) {\n      console.log(circlePoints[i])\n      const startpoint = circlePoints[i][0]\n      const endpoint = circlePoints[i][circlePoints[i].length - 1]\n\n      const midpoint = [(endpoint[0] + startpoint[0]) / 2, (endpoint[1] + startpoint[1]) / 2]\n\n      const widthVal = Math.abs(endpoint[0] - startpoint[0])\n      const heightval = Math.abs(endpoint[1] - startpoint[1])\n\n        circleArray.push(\n        <Circle\n          key={i}\n          x={midpoint[0]}\n          y={midpoint[1]}\n          width={widthVal}\n          height={heightval}\n          fill={'Blue'}\n        />\n      )\n    }\n    return circleArray;\n  }\n\n  render() {\n    const stageWidth = 600;\n    const stageHeight = 600;\n\n    return (\n      <div>\n        <Container>\n          <Row>\n            <button\n              onClick={this.brushClick}\n              id=\"brushButton\"\n              className={this.state.currentTool === 'brush' ? 'activeTool' : ''}\n            >\n              Brush\n            </button>\n          </Row>\n          <Row>\n            <button\n              onClick={this.eraserClick}\n              id=\"eraserButton\"\n              className={this.state.currentTool === 'eraser' ? 'activeTool' : ''}\n            >\n              Eraser\n            </button>\n          </Row>\n          <Row>\n            <button\n              onClick={this.circleClick}\n              id=\"circleButton\"\n              className={this.state.currentTool === 'circle' ? 'activeTool' : ''}\n            >\n              Circle\n            </button>\n          </Row>\n          <Row>\n            <button\n              onClick={this.clearClick}\n              id=\"clearButton\"\n            >\n              Clear\n            </button>\n          </Row>\n\n        </Container>\n\n\n        <Stage\n          container={'#mapRow'}\n          width={stageWidth}\n          height={stageHeight}\n          onContentMousedown={this.handleMouseDown}\n          onContentMousemove={this.handleMouseMove}\n          onContentMouseup={this.handleMouseUp}\n          ref={node => {\n            this.stageRef = node;\n          }}\n        >\n          <Layer>\n            <MapImg />\n          </Layer>\n          <Layer>\n            {\n              this.RenderCircles()\n            }\n          </Layer>\n          <Layer>\n            {\n              this.state.lines.map((line, i) => (<Line key={i} points={line} stroke=\"red\" />))\n            }\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}